{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kUAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,aCFdC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAY,YAAjB,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCH3CM,G,YAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAcA,EAAaG,SAAUF,MCyCtEG,E,kDAvCb,aAAe,IAAD,8BAEZ,gBAiBFH,aAAe,SAAAI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAS,CACZb,SAAU,GACVU,YAAa,IAGf,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBATR,E,qDAYd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACT,SAAWmB,S,oBAS3C,WAAU,IAAD,EAC2BC,KAAKP,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZW,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAAIA,EAAQE,KAAK0B,cAAcC,SAASd,EAAYa,kBAGpG,OACE,sBAAK/B,UAAU,MAAf,UACA,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUJ,SAAUqB,W,GAnCRI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IAAQC,SAASC,eAAe,SAMlCX,M","file":"static/js/main.22e11a66.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nexport const Card = (props) => (\n    <div className=\"card-container\">\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set3&size=180x180`}></img>\n        <h2> {props.monster.name} </h2>\n        <p> {props.monster.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n    <div className = 'card-list'>\n     {props.monsters.map(monster => (<Card key={monster.id} monster={monster}/>))}\n    </div>\n);\n \n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => { \n    return (  \n        <input className=\"search\" type='search' placeholder ={placeholder} onChange={handleChange}/>\n    );\n}\n \n","\nimport React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport './App.css';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    // extends the functionality that exists on component to lifecycle methods and render()\n    super();\n\n    this.state =  {\n      monsters: [],\n      searchField: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    // in this case, 'this' is set to the context of the component, so it will know it represents the this.state\n    .then(users => this.setState({monsters : users}))\n  }\n\n  handleChange = e => {\n   this.setState({ searchField: e.target.value})\n  }\n\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n   \n    return (\n      <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"search monsters\" handleChange={this.handleChange}/>\n      <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}